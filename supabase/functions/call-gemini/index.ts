// supabase/functions/call-gemini/index.ts
import { serve } from 'std/http/server.ts'; // Agora usa o alias "std/"
import { GoogleGenerativeAI } from '@google/generative-ai'; // Agora usa o alias "@google/generative-ai"

const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');

if (!GEMINI_API_KEY) {
  console.error("CRITICAL: GEMINI_API_KEY is not set. Function cannot proceed.");
  // Em um cenário real, você não deve prosseguir sem a chave.
  // A função provavelmente falhará no new GoogleGenerativeAI().
  // Para fins de deploy, a plataforma Supabase injetará o segredo.
  // Para desenvolvimento local, você precisa configurar isso.
}

// O '!' é uma asserção de não-nulidade. Use com cautela.
// Garanta que GEMINI_API_KEY será definido no ambiente de execução.
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY!);
const model = genAI.getGenerativeModel({ model: "gemini-pro" });

console.log('Function call-gemini initialized (TAE IDE check).');

serve(async (req) => {
  console.log(`Request received: ${req.method} ${req.url}`);

  const corsHeaders = {
    'Access-Control-Allow-Origin': '*', // Restrinja em produção
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
  };

  if (req.method === 'OPTIONS') {
    console.log('Handling OPTIONS request');
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Assegure que o corpo da requisição é JSON e trate erros de parsing
    let body;
    try {
      body = await req.json();
    } catch (jsonError) {
      console.error('Failed to parse request body as JSON:', jsonError);
      return new Response(JSON.stringify({ error: 'Invalid JSON body' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { prompt } = body;
    console.log('Prompt received:', prompt);

    if (!prompt) {
      console.warn('Prompt is missing from request body');
      return new Response(JSON.stringify({ error: 'Prompt is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    if (!GEMINI_API_KEY) {
      console.error("Gemini API key is missing when trying to generate content.");
      return new Response(JSON.stringify({ error: 'Server configuration error: API key missing.' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const result = await model.generateContent(prompt);
    const response = result.response; // Removido await desnecessário aqui
    const text = response.text();

    console.log('Text generated by Gemini:', text);

    return new Response(JSON.stringify({ generatedText: text }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in function execution:', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to generate text due to an internal error.';
    return new Response(JSON.stringify({ error: errorMessage }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});